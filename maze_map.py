from maze_blocks import Block, Gate, Teleport, Food


map_string = ['1 111111111111111111',
              '1 1   1    1   1   1',
              '1 1 1 1 111111 1 1 1',
              '1 1 1 1        1 1 1',
              '1 1 1 1 11111111 1 1',
              '1 1 1 1    1     1 1',
              '1 1 1 1 1111 11111 1',
              '1 1 1 1      1     1',
              '1   1   111111 11 11',
              '1 1111 11    1  11 1',
              '1    1 1  1 111 1  1',
              '1111 111 11 1     11',
              '1    1   1  11111  1',
              '1 1111 111 11   11 1',
              '1      1   1  1  1 1',
              '111111 1 111 111 1 1',
              '1      1     1 1 1 1',
              '1 111111111111 1 111',
              '1              1   2',
              '11111111111111111111']

blocks_name = {0: 'grass', 1: 'wall', 2: 'exit', 3: 'red_key', 4: 'red_door', 5: 'teleport'}


m_dig00 = [[[1], [0], [1], [1], [1], [1], [1], [1], [1], [1]],
           [[1], [0], [1], [0], [0], [0], [1], [0], [0], [0]],
           [[1], [0], [1], [0], [1], [0], [1], [0], [1], [1]],
           [[1], [0], [0], [0], [1], [0], [1], [0], [0], [0]],
           [[1], [0], [1], [0], [1], [0], [1], [0], [1], [1]],
           [[1], [0], [1], [0], [1], [0], [1], [0], [0], [0]],
           [[1], [0], [1], [0], [1], [0], [1], [0], [1], [1]],
           [[1], [0], [1], [0], [1], [0], [1], [0], [0], [0]],
           [[1], [0], [0], [0], [1], [0], [0], [0], [1], [1]],
           [[1], [0], [1], [1], [1], [1], [0], [1], [1], [0]]]

m_dig10 = [[[1], [0], [0], [0], [0], [1], [0], [1], [0], [0]],
           [[1], [1], [1], [1], [0], [1], [1], [1], [0], [1]],
           [[1], [0], [0], [0], [0], [1], [0], [0], [0], [1]],
           [[1], [0], [1], [1], [1], [1], [0], [1], [1], [1]],
           [[1], [0], [0], [0], [0], [0], [0], [1], [0], [0]],
           [[1], [1], [1], [1], [1], [1], [0], [1], [0], [1]],
           [[1], [0], [0], [0], [0], [0], [0], [1], [0], [0]],
           [[1], [0], [1], [1], [1], [1], [1], [1], [1], [1]],
           [[1], [0], [0], [0], [0], [0], [0], [0], [0], [0]],
           [[1], [1], [1], [1], [1], [1], [1], [1], [1], [1]]]

m_dig01 = [[[1], [1], [1], [1], [1], [1], [1], [1], [1], [1]],
           [[0], [1], [0], [0], [0], [1], [0], [0], [0], [1]],
           [[1], [1], [1], [1], [0], [1], [0], [1], [0], [1]],
           [[0], [0], [0], [0], [0], [1], [0], [1], [0], [1]],
           [[1], [1], [1], [1], [1], [1], [0], [1], [0], [1]],
           [[0], [1], [0], [0], [0], [0], [0], [1], [0], [1]],
           [[1], [1], [0], [1], [1], [1], [1], [1], [0], [1]],
           [[0], [0], [0], [1], [0], [0], [0], [0], [0], [1]],
           [[1], [1], [1], [1], [0], [1], [1], [0], [1], [1]],
           [[0], [0], [0], [1], [0], [0], [1], [1], [0], [1]]]

m_dig11 = [[[1], [0], [1], [1], [1], [0], [1], [0], [0], [1]],
           [[1], [0], [1], [0], [0], [0], [0], [0], [1], [1]],
           [[0], [0], [1], [1], [1], [1], [1], [0], [0], [1]],
           [[0], [1], [1], [0], [0], [0], [1], [1], [0], [1]],
           [[0], [1], [0], [0], [1], [0], [0], [1], [0], [1]],
           [[1], [1], [0], [1], [1], [1], [0], [1], [0], [1]],
           [[0], [0], [0], [1], [0], [1], [0], [1], [0], [1]],
           [[1], [1], [1], [1], [0], [1], [0], [1], [1], [1]],
           [[0], [0], [0], [0], [0], [1], [0], [0], [0], [2]],
           [[1], [1], [1], [1], [1], [1], [1], [1], [1], [1]]]


map_lvl4 = [[m_dig00, m_dig01],
            [m_dig10, m_dig11]]

m_dig00 = [[[1], [0], [1], [1], [1], [1], [1], [1], [1], [1]],
           [[1], [0], [1], [0], [0], [0], [1], [0], [0], [0]],
           [[1], [0], [1], [0], [1], [0], [1], [0], [1], [1]],
           [[1], [0], [1], [0], [1], [0], [1], [0], [0], [0]],
           [[1], [0], [1], [0], [1], [0], [1], [0], [1], [1]],
           [[1], [0], [1], [0], [1], [0], [1], [0], [0], [0]],
           [[1], [0], [1], [0], [1], [0], [1], [0], [1], [1]],
           [[1], [0], [1], [0], [1], [0], [1], [0], [0], [0]],
           [[1], [0], [0], [0], [1], [0], [0], [0], [1], [1]],
           [[1], [0], [1], [1], [1], [1], [0], [1], [1], [0]]]

m_dig10 = [[[1], [0], [0], [0], [0], [1], [0], [1], [0], [0]],
           [[1], [1], [1], [1], [0], [1], [1], [1], [0], [1]],
           [[1], [0], [0], [0], [0], [1], [0], [0], [0], [1]],
           [[1], [0], [1], [1], [1], [1], [0], [1], [1], [1]],
           [[1], [0], [0], [0], [0], [0], [0], [1], [0], [0]],
           [[1], [1], [1], [1], [1], [1], [0], [1], [0], [1]],
           [[1], [0], [0], [0], [0], [0], [0], [1], [0], [0]],
           [[1], [0], [1], [1], [1], [1], [1], [1], [1], [1]],
           [[1], [0], [0], [0], [0], [0], [0], [0], [0], [0]],
           [[1], [1], [1], [1], [1], [1], [1], [1], [1], [1]]]

m_dig01 = [[[1], [1], [1], [1], [1], [1], [1], [1], [1], [1]],
           [[0], [1], [0], [0], [0], [1], [0], [0], [0], [1]],
           [[1], [1], [1], [1], [0], [1], [0], [1], [0], [1]],
           [[0], [0], [0], [0], [0], [1], [0], [1], [0], [1]],
           [[1], [1], [1], [1], [1], [1], [0], [1], [0], [1]],
           [[0], [1], [0], [0], [0], [0], [0], [1], [0], [1]],
           [[1], [1], [0], [1], [1], [1], [1], [1], [0], [1]],
           [[0], [0], [0], [1], [0], [0], [0], [0], [0], [1]],
           [[1], [1], [1], [1], [0], [1], [1], [0], [1], [1]],
           [[0], [0], [0], [1], [0], [0], [1], [1], [0], [1]]]

m_dig11 = [[[1], [0], [1], [1], [1], [0], [1], [0], [0], [1]],
           [[1], [0], [1], [0], [0], [0], [0], [0], [1], [1]],
           [[0], [0], [1], [1], [1], [1], [1], [0], [0], [1]],
           [[0], [1], [1], [0], [0], [0], [1], [1], [0], [1]],
           [[0], [1], [0], [0], [1], [0], [0], [1], [0], [1]],
           [[1], [1], [0], [1], [1], [1], [0], [1], [0], [1]],
           [[0], [0], [0], [1], [0], [1], [0], [1], [0], [1]],
           [[1], [1], [1], [1], [0], [1], [0], [1], [1], [1]],
           [[0], [0], [0], [0], [0], [1], [0], [0], [0], [2]],
           [[1], [1], [1], [1], [1], [1], [1], [1], [1], [1]]]

map_lvl3 = [[m_dig00, m_dig01],
            [m_dig10, m_dig11]]


m_dig00 = [[[1], [0], [1], [1], [1], [1], [1], [1], [1], [1]],
           [[1], [0], [1], [0], [0], [0], [1], [0], [0], [4]],
           [[1], [0], [4], [0], [1], [0], [0], [0], [1], [1]],
           [[1], [0], [1], [0], [1], [0, 3], [1], [0], [0], [1]],
           [[1], [0], [1], [0], [1], [0], [1], [0], [1], [1]],
           [[1], [0], [1], [0], [1], [0], [1], [0], [0], [1]],
           [[1], [0, 3], [1], [0], [1], [0], [1], [0], [1], [1]],
           [[1], [0], [1], [0], [1], [0], [1], [0], [0], [1]],
           [[1], [0], [4], [0], [1], [0], [4], [0], [1], [1]],
           [[1], [1], [1], [1], [1], [1], [1], [1], [1], [1]]]

m_dig01 = [[[1], [1], [1], [1], [1], [1], [1], [1], [1], [1]],
           [[0], [0], [1], [0], [0], [0], [1], [0], [0], [1]],
           [[1], [0, 3], [4], [0], [1], [0], [0], [0], [1], [1]],
           [[1], [0], [1], [0], [1], [0], [1], [0], [0], [1]],
           [[1], [0], [4], [0], [0], [0], [0], [0], [1], [1]],
           [[1], [0], [1], [0], [1], [0], [1], [0], [0], [1]],
           [[1], [0], [4], [0], [0], [0], [0], [0], [1], [1]],
           [[1], [0], [1], [0], [1], [0], [1], [0], [0], [2]],
           [[1], [0], [4], [0], [0], [0], [0], [0], [1], [1]],
           [[1], [1], [1], [1], [1], [1], [1], [1], [1], [1]]]

map_lvl2 = [[m_dig00, m_dig01]]


m_dig00 = [[[1], [0], [1], [1], [1], [1], [1], [1], [1], [1]],
           [[1], [0], [0], [0], [1], [0], [4], [0], [0], [1]],
           [[1], [1], [1], [0, 5], [1], [0], [1], [0], [1], [1]],
           [[1], [0], [0], [0], [1], [0], [1], [0], [0], [1]],
           [[1], [0], [1], [1], [1], [0], [1], [0], [1], [1]],
           [[1], [0], [1], [0], [1], [0], [1], [0], [0], [1]],
           [[1], [0], [1], [0], [0], [0], [1], [0, 6], [1], [1]],
           [[1], [0], [1], [0], [1], [0], [1], [0], [0], [2]],
           [[1], [0], [0], [0], [1], [0, 3], [1], [0], [1], [1]],
           [[1], [1], [1], [1], [1], [1], [1], [1], [1], [1]]]

map_lvl1 = [[m_dig00]]

maps_ = [map_lvl1, map_lvl2, map_lvl3, map_lvl4]

masks_ = [(0, 0, 0, 1), (0, 0, 0, 1), (0, 0, 0, 1), (0, 0, 0, 1)]

ghosts_ = [[], [(0, 0, 7, 6), (0, 1, 5, 5)], [], [(0, 0, 1, 8)]]

teleports_ = [[], [], [], [((0, 0, 3, 2), (0, 0, 0, 5))]]

'''def map_str_to_map_obj(map_str):
    map_obj = []
    for mr in range(map_rows):
        map_row = []
        for mc in range(map_cols):
            map_cell = []
            for cr in range(cell_rows):
                cell_row = []
                for cc in range(cell_cols):
                    obj_char = map_str[mr][mc][cr][cc]
                    obj = []
                    if obj_char == '1':
                        obj = [Ground((cc * square_size + 1, cr * square_size + 1, square_size - 2, square_size - 2),
                                      1)]
                    elif obj_char == '2':
                        obj = [Ground((cc * square_size + 1, cr * square_size + 1, square_size - 2, square_size - 2),
                                      2)]

                    cell_row.append(obj)
                map_cell.append(cell_row)
            map_row.append(map_cell)
        map_obj.append(map_row)
'''


def map_dig_to_map_obj(map_dig, square_size):
    map_obj = []
    for mr in range(len(map_dig)):
        map_row = []
        for mc in range(len(map_dig[mr])):
            cell = []
            for cr in range(len(map_dig[mr][mc])):
                cell_row = []
                for cc in range(len(map_dig[mr][mc][cr])):
                    square = []
                    for dig in map_dig[mr][mc][cr][cc]:
                        obj = Block('ground', 'grass', (cc * square_size + 1, cr * square_size + 1,
                                                        square_size - 2, square_size - 2))
                        if dig == 1:
                            obj = Block('wall', 'stone_wall', (cc * square_size + 1, cr * square_size + 1,
                                                               square_size - 2, square_size - 2))
                        elif dig == 2:
                            obj = Block('exit', 'exit', (cc * square_size + 1, cr * square_size + 1,
                                                         square_size - 2, square_size - 2))
                        elif dig == 3:
                            obj = Block('key', 'red_key', (cc*square_size+20, cr*square_size+20,
                                                           square_size-40, square_size-40))
                        elif dig == 4:
                            obj = Gate('gate', 'red_gate', (cc * square_size + 1, cr * square_size + 1,
                                                            square_size - 2, square_size - 2))
                        elif dig == 5:
                            obj = Food('food', 'apple', (cc * square_size, cr * square_size))
                        elif dig == 6:
                            obj = Food('food', 'cherry', (cc * square_size, cr * square_size))

                        square.append(obj)
                    cell_row.append(square)
                cell.append(cell_row)
            map_row.append(cell)
        map_obj.append(map_row)

        '''
        teleports = []
        for teleport_square, destination_square in self.all_teleports[0]:
            teleport = Teleport(teleport_square, destination_square)
            (mr, mc, cr, cc) = teleport_square
            self.ghosts.append(teleport)
            self.map[mr][mc][cr][cc].append(teleport)
        '''

    return map_obj


'''
pg.init()

win = pg.display.set_mode((square_size * cell_rows * map_rows, square_size * cell_cols * map_cols))


def main():

    while True:
        for m_r in range(map_rows):
            for m_c in range(map_cols):
                for c_r in range(cell_rows):
                    for c_c in range(cell_cols):
                        if (map_[m_r][m_c])[c_r][c_c] == 1:
                            x = m_c*cell_cols*square_size + c_c * square_size
                            y = m_r*cell_rows*square_size + c_r * square_size
                            pg.draw.rect(win, pg.Color(0, 0, 100), (x, y, square_size, square_size))

        pg.draw.line(win, pg.Color(100, 100, 0), (2 * cell_cols * square_size, cell_rows * square_size),
                     (0, cell_rows * square_size))
        pg.draw.line(win, pg.Color(100, 100, 0), (cell_cols * square_size, 2 * cell_rows * square_size),
                     (cell_cols * square_size, 0))
#        for c_r in range(cell_rows_):
#            for c_c in range(cell_cols_):
#                if (map_[0][0])[c_r][c_c] == 1:
#                    x = c_c * square_size_
#                    y = c_r * square_size_
#                    pg.draw.rect(win, pg.Color(0, 0, 100), (x, y, square_size_, square_size_))

        pg.display.update()

        for event in pg.event.get():
            if event.type == pg.QUIT:
                pg.quit()
                quit()


#main()
'''
